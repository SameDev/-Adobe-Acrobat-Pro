generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  nome         String       @db.VarChar(25)
  cargo        Cargo        @default(USUARIO)
  foto_perfil  String?
  data_nasc    DateTime
  senha        String       @db.VarChar(200)
  playlist     Playlist[]
  Reproducao   Reproducao[]
  gostei       Music[]      @relation("LikedSongs")
  musica       Music[]      @relation("MusicToUser")
  album        Album[]      @relation("AlbumToUser")
  tags         Tags[]       @relation("TagsToUser")
  gostei_album Album[]      @relation("LikedAlbums")
  comentarios  Comments[]

  @@map("tb_usuario")
}

model Tags {
  id       Int        @id @default(autoincrement())
  nome     String     @unique @db.VarChar(25)
  musicas  Music[]    @relation("MusicToTags")
  playlist Playlist[] @relation("PlaylistToTags")
  usuario  User[]     @relation("TagsToUser")
  albums   Album[]    @relation("AlbumsToTags")

  @@map("tb_tags")
}

model Music {
  id            Int          @id @default(autoincrement())
  nome          String       @db.VarChar(25)
  artista       String
  url           String?
  duracao       String       @db.VarChar(5)
  data_lanc     DateTime
  image_url     String?
  Reproducao    Reproducao[]
  usuarioGostou User[]       @relation("LikedSongs")
  playlist      Playlist[]   @relation("MusicToPlaylist")
  tags          Tags[]       @relation("MusicToTags")
  artistaId     User[]       @relation("MusicToUser")
  comentarios   Comments[]   @relation("MusicToComments")
  albumId       Int
  album         Album        @relation(fields: [albumId], references: [id])

  @@map("tb_musicas")
}

model Comments {
  id      Int     @id @default(autoincrement())
  nome    String  @db.VarChar(25)
  userId  Int
  autor   User    @relation(fields: [userId], references: [id])
  musicas Music[] @relation("MusicToComments")
}

model Playlist {
  id        Int      @id @default(autoincrement())
  nome      String   @db.VarChar(25)
  descricao String?
  foto      String?
  data      DateTime
  userId    Int
  criador   User     @relation(fields: [userId], references: [id])
  musicas   Music[]  @relation("MusicToPlaylist")
  tags      Tags[]   @relation("PlaylistToTags")

  @@map("tb_playlists")
}

model Reproducao {
  id             Int      @id @default(autoincrement())
  userId         Int
  songId         Int
  dataReproducao DateTime
  tempoEscutado  String   @db.VarChar(5)
  tempoMax       String   @db.VarChar(5)
  music          Music    @relation(fields: [songId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@map("tb_reproducao")
}

model Album {
  id            Int        @id @default(autoincrement())
  lancamento    Lancamento @default(SINGLE)
  nome          String
  artista       String
  image_url     String?
  data_lanc     DateTime
  usuarioGostou User[]     @relation("LikedAlbums")
  tags          Tags[]     @relation("AlbumsToTags")
  artistaId     User[]     @relation("AlbumToUser")
  musicas       Music[]

  @@map("tb_album")
}

enum Lancamento {
  EP
  ALBUM
  SINGLE
}

enum Cargo {
  USUARIO
  ADMIN
  ARTISTA
}
